# As an alternative to using secrets.yml, you can also store your secrets
# in Vault.
#
# In this file, the following variables will be replaced:
#
#     $PROJECT    The name of the project (-p)
#     $TARGET     The name of the current target
#     $POD        The name of the pod
#     $SERVICE    The name of the service

# Normally, we want to enable this plugin in production mode (and
# staging if we have it).
#
# For local development, we have a choice:
#
# 1. Specify fake secrets somewhere in `pods/targets/development`,
# 2. Use the `secrets` plugin to save real secrets locally.
# 3. Use vault in the development environment, and optionally use
#    `no_default_policies` to skip applying secrets to local placeholder
#    services.
enable_in_targets:
- "production"
- "development"

# How should individual services authenticate themselves to vault?  The only
# supported value for now is "token".
#
# token:
#
#   To use this, set the environment variables `VAULT_ADDR` and
#   `VAULT_MASTER_TOKEN` before running cage.  These values will be
#   used to construct per-service `VAULT_TOKEN` values, which be added
#   to the appropriate services along with `VAULT_ADDR`.
auth_type: "token"

# Extra environment variables to add to each service.
#
# These will only be applied to services that have at least once policy.
extra_environment:
  VAULT_ENV: "$TARGET"

# How long should the generated tokens be valid for, in seconds?
default_ttl: 2592000

# We use these templates to construct the names of policies to apply to our
# project.
default_policies:
  - "$PROJECT-$TARGET"
  - "$PROJECT-$TARGET-$POD-$SERVICE"

# If you want to apply additional policies to particular pods, you may also
# target them as follows.
pods:
  db:
    db:
      # This is a "placeholder" service that we only run in development mode,
      # and it doesn't need access to vault. 
      no_default_policies: true
  frontend:
    web:
      policies:
        - "$PROJECT-$TARGET-ssl"
